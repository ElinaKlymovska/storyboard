"""–ï–∫—Å–ø–æ—Ä—Ç —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –≤ Notion."""

import os
import sys
from pathlib import Path
from typing import List

try:
    from notion_client import Client
    NOTION_AVAILABLE = True
except ImportError:
    NOTION_AVAILABLE = False
    Client = None

from video_shots.core.models import TimePoint
from video_shots.utils.time_utils import format_timestamp
from video_shots.utils.github_utils import create_storyboard_gist, get_gist_instructions
from video_shots.utils.image_hosting import (
    upload_to_imgur, 
    upload_to_imgbb, 
    upload_to_google_drive,
    encode_image_to_base64,
    create_public_html_with_images
)


def upload_image_to_notion(notion, image_path: Path, hosting_method: str = "imgur") -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø—É–±–ª—ñ—á–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î URL –¥–ª—è Notion."""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞ –ø—É–±–ª—ñ—á–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥
        public_url = None
        
        if hosting_method == "imgur":
            public_url = upload_to_imgur(image_path)
        elif hosting_method == "imgbb":
            public_url = upload_to_imgbb(image_path)
        elif hosting_method == "googledrive":
            public_url = upload_to_google_drive(image_path)
        elif hosting_method == "base64":
            public_url = encode_image_to_base64(image_path)
        
        if public_url:
            if hosting_method == "base64":
                return f"üì∑ {image_path.name}\nüîó Base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–±—É–¥–æ–≤–∞–Ω–æ –≤ HTML\nüí° –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ HTML —Ñ–∞–π–ª"
            return f"üì∑ {image_path.name}\nüîó –ü—É–±–ª—ñ—á–Ω–∏–π URL: {public_url}"
        else:
            # Fallback –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É
            local_url = f"file://{image_path.absolute()}"
            return f"üì∑ {image_path.name}\nüîó –õ–æ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö: {local_url}\nüí° –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ HTML —Ñ–∞–π–ª"
        
    except Exception as exc:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Notion: {exc}", file=sys.stderr)
        return f"üì∑ {image_path.name} (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ)"


def embed_html_in_notion(html_file: Path) -> str:
    """–í–±—É–¥–æ–≤—É—î HTML –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Notion —è–∫ –∫–æ–¥."""
    try:
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è Notion (–º–∞–∫—Å–∏–º—É–º ~2000 —Å–∏–º–≤–æ–ª—ñ–≤)
        if len(html_content) > 2000:
            html_content = html_content[:2000] + "\n\n... (–∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä—ñ–∑–∞–Ω–æ, –ø–æ–≤–Ω–∏–π HTML –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—ñ)"
        
        return html_content
        
    except Exception as exc:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è HTML —Ñ–∞–π–ª—É: {exc}", file=sys.stderr)
        return ""


def create_public_html_url(html_file: Path, video_name: str = None) -> str:
    """–°—Ç–≤–æ—Ä—é—î –ø—É–±–ª—ñ—á–Ω–∏–π URL –¥–ª—è HTML —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ GitHub Gist."""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ GitHub Gist
        gist_url = create_storyboard_gist(html_file, video_name or "video")
        
        if gist_url:
            return get_gist_instructions(html_file, gist_url)
        else:
            # –Ø–∫—â–æ Gist –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            return get_gist_instructions(html_file, None)
        
    except Exception as exc:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ URL: {exc}", file=sys.stderr)
        return get_gist_instructions(html_file, None)


def create_notion_storyboard(
    notion,
    parent_page_id: str,
    video_name: str,
    screenshots: List[Path],
    analyses: List[Path],
    timepoints: List[TimePoint],
    html_file: Path = None,
    image_hosting_method: str = "imgur"
) -> str:
    """–°—Ç–≤–æ—Ä—é—î Notion —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ storyboard."""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É storyboard
        page_title = f"Script & Timeline: {video_name}"
        
        page = notion.pages.create(
            parent={"page_id": parent_page_id},
            properties={
                "title": {
                    "title": [{"text": {"content": page_title}}]
                }
            }
        )
        
        page_id = page["id"]
        
        # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å
        notion.blocks.children.append(
            block_id=page_id,
            children=[
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": f"üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π script & timeline –¥–ª—è –≤—ñ–¥–µ–æ {video_name}\n"
                                             f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤: {len(screenshots)}\n"
                                             f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                                }
                            }
                        ]
                    }
                }
            ]
        )
        
        # –î–æ–¥–∞—î–º–æ HTML —Ä–æ–∑–∫–∞–¥—Ä–æ–≤–∫—É —è–∫—â–æ —î
        if html_file and html_file.exists():
            html_content = embed_html_in_notion(html_file)
            if html_content:
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[
                        {
                            "object": "block",
                            "type": "heading_2",
                            "heading_2": {
                                "rich_text": [
                                    {
                                        "type": "text",
                                        "text": {"content": "üìã –†–æ–∑–∫–∞–¥—Ä–æ–≤–∫–∞ (Storyboard)"}
                                    }
                                ]
                            }
                        },
                        {
                            "object": "block",
                            "type": "code",
                            "code": {
                                "rich_text": [
                                    {
                                        "type": "text",
                                        "text": {"content": html_content}
                                    }
                                ],
                                "language": "html"
                            }
                        },
                        {
                            "object": "block",
                            "type": "callout",
                            "callout": {
                                "rich_text": [
                                    {
                                        "type": "text",
                                        "text": {
                                            "content": create_public_html_url(html_file, video_name)
                                        }
                                    }
                                ],
                                "icon": {"emoji": "üîó"}
                            }
                        }
                    ]
                )
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –∫–∞–¥—Ä
        for i, (screenshot, analysis, tp) in enumerate(zip(screenshots, analyses, timepoints), 1):
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_url = upload_image_to_notion(notion, screenshot, image_hosting_method)
            
            if not image_url:
                continue
            
            # –ß–∏—Ç–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑
            analysis_text = ""
            if analysis.exists():
                with open(analysis, 'r', encoding='utf-8') as f:
                    analysis_text = f.read().strip()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–ª–æ–∫ –¥–ª—è –∫–∞–¥—Ä—É
            frame_blocks = [
                {
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": f"–ö–∞–¥—Ä {i} - {format_timestamp(tp.seconds, precision='ms')}"
                                }
                            }
                        ]
                    }
                },
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {"content": image_url}
                            }
                        ]
                    }
                }
            ]
            
            # –î–æ–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ —è–∫—â–æ —î
            if analysis_text:
                frame_blocks.append({
                    "object": "block",
                    "type": "callout",
                    "callout": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {"content": analysis_text}
                            }
                        ],
                        "icon": {"emoji": "ü§ñ"}
                    }
                })
            
            # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
            frame_blocks.append({
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": f"–ß–∞—Å: {format_timestamp(tp.seconds, precision='ms')} | "
                                         f"–ö–∞–¥—Ä: #{tp.frame_index} | "
                                         f"–Ü–Ω–¥–µ–∫—Å: {tp.index}"
                            }
                        }
                    ]
                }
            })
            
            # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
            frame_blocks.append({
                "object": "block",
                "type": "divider",
                "divider": {}
            })
            
            # –î–æ–¥–∞—î–º–æ –±–ª–æ–∫–∏ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            notion.blocks.children.append(
                block_id=page_id,
                children=frame_blocks
            )
        
        return page_id
        
    except Exception as exc:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Notion —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {exc}", file=sys.stderr)
        return ""


def check_notion_token() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Notion API —Ç–æ–∫–µ–Ω–∞."""
    return bool(os.getenv("NOTION_API_TOKEN"))


def create_notion_client():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª—ñ—î–Ω—Ç Notion –∑ —Ç–æ–∫–µ–Ω–æ–º –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."""
    notion_token = os.getenv("NOTION_API_TOKEN")
    if not notion_token:
        raise ValueError("NOTION_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    
    return Client(auth=notion_token)

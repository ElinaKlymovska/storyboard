#!/usr/bin/env python3
"""Run event-driven keyframe detection on test video."""

import sys
from pathlib import Path
import time
import json

# Add project root to path
PROJECT_ROOT = Path(__file__).resolve().parent
sys.path.insert(0, str(PROJECT_ROOT))

def run_optimized_detection():
    """Run event-driven detection with optimized settings for speed."""
    print("üöÄ –ó–ê–ü–£–°–ö EVENT-DRIVEN –î–ï–¢–ï–ö–¶–Ü–á –ö–ï–ô–§–†–ï–ô–ú–Ü–í")
    print("=" * 60)
    
    video_path = Path("input/videos/nyane_30s.mp4")
    if not video_path.exists():
        print(f"‚ùå –í—ñ–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {video_path}")
        return False
    
    try:
        from video_shots.core.keyframe_selector import KeyframeSelector
        
        print(f"üìπ –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–µ–æ: {video_path.name}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        selector = KeyframeSelector(
            mode="event_driven",
            facial_sensitivity=0.2,      # –ü–æ–º—ñ—Ä–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            pose_sensitivity=0.3,        
            scene_sensitivity=0.4,       
            similarity_threshold=0.8,    # –ù–∏–∂—á–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            filter_strategy="keep_first_discard_rest"
        )
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–±—Ä–æ–±–∫–∏
        if hasattr(selector.micro_detector, 'max_frames_per_second'):
            selector.micro_detector.max_frames_per_second = 3  # –î—É–∂–µ –ø–æ–≤—ñ–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        
        print("‚öôÔ∏è  –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:")
        print(f"   üéõÔ∏è  –†–µ–∂–∏–º: event_driven")
        print(f"   üëÅÔ∏è  –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ –æ–±–ª–∏—á—á—è: 0.2")
        print(f"   ü§∏ –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ –ø–æ–∑–∏: 0.3")
        print(f"   üé¨ –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ —Å—Ü–µ–Ω–∏: 0.4")
        print(f"   üìä –ú–∞–∫—Å. FPS –æ–±—Ä–æ–±–∫–∏: 3")
        print(f"   üîß –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: keep_first_discard_rest")
        
        print(f"\nüéØ –ü–û–ß–ê–¢–û–ö –î–ï–¢–ï–ö–¶–Ü–á...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é –∑ –ø–æ–º—ñ—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤
        timepoints = selector.select_keyframes(
            video_path=video_path,
            target_count=15  # –ü–æ–º—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        )
        
        processing_time = time.time() - start_time
        
        print(f"\n‚úÖ –î–ï–¢–ï–ö–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   ‚è±Ô∏è  –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üé¨ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤: {len(timepoints)}")
        print(f"   üìà –®–≤–∏–¥–∫—ñ—Å—Ç—å: ~{29.6/processing_time:.1f}x –≤—ñ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É")
        
        if timepoints:
            print(f"\nüé¨ –í–ò–Ø–í–õ–ï–ù–Ü –ö–ï–ô–§–†–ï–ô–ú–ò:")
            for i, tp in enumerate(timepoints):
                print(f"   {i+1:2d}. {tp.seconds:6.3f}—Å (–∫–∞–¥—Ä {tp.frame_index})")
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª —É —á–∞—Å—ñ
            if len(timepoints) > 1:
                intervals = []
                for i in range(len(timepoints)-1):
                    interval = timepoints[i+1].seconds - timepoints[i].seconds
                    intervals.append(interval)
                
                avg_interval = sum(intervals) / len(intervals)
                print(f"\nüìä –ê–ù–ê–õ–Ü–ó –†–û–ó–ü–û–î–Ü–õ–£:")
                print(f"   ‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval:.2f}—Å")
                print(f"   üìè –ú—ñ–Ω. —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {min(intervals):.2f}—Å")
                print(f"   üìè –ú–∞–∫—Å. —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {max(intervals):.2f}—Å")
                print(f"   üéØ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {len(timepoints)/(29.6/avg_interval):.1%} –≤—ñ–¥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–µ–º–ø–ª—É–≤–∞–Ω–Ω—è")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        print(f"\nüîç –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£...")
        try:
            analysis_start = time.time()
            analysis = selector.get_event_driven_analysis(video_path)
            analysis_time = time.time() - analysis_start
            
            print(f"   ‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {analysis_time:.2f}—Å")
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ú–Ü–ù:")
            print(f"   üîç –í—Å—å–æ–≥–æ –∑–º—ñ–Ω –≤–∏—è–≤–ª–µ–Ω–æ: {analysis['total_changes_detected']}")
            print(f"   üè∑Ô∏è  –ö–ª–∞—Å–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ –ø–æ–¥—ñ–π: {analysis['classified_events']}")
            print(f"   üìã –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–¥—ñ–π: {analysis['filtered_events']}")
            print(f"   üé¨ –§—ñ–Ω–∞–ª—å–Ω–∏—Ö –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤: {analysis['final_timepoints']}")
            print(f"   üìä –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è: {analysis['compression_ratio']:.3f}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∏–ø–∏ –≤–∏—è–≤–ª–µ–Ω–∏—Ö –∑–º—ñ–Ω
            if 'change_events' in analysis and analysis['change_events']:
                change_types = {}
                for event in analysis['change_events']:
                    change_type = event.change_type.value
                    if change_type not in change_types:
                        change_types[change_type] = 0
                    change_types[change_type] += 1
                
                print(f"\nüè∑Ô∏è  –¢–ò–ü–ò –í–ò–Ø–í–õ–ï–ù–ò–• –ó–ú–Ü–ù:")
                for change_type, count in change_types.items():
                    print(f"   üìå {change_type}: {count} –∑–º—ñ–Ω")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–º—ñ–Ω
                print(f"\nüéØ –ü–†–ò–ö–õ–ê–î–ò –í–ò–Ø–í–õ–ï–ù–ò–• –ó–ú–Ü–ù:")
                for i, event in enumerate(analysis['change_events'][:5]):
                    print(f"   {i+1}. {event.timestamp:6.3f}—Å - {event.change_type.value}")
                    print(f"      –û–ø–∏—Å: {event.description}")
                    print(f"      –û—Ü—ñ–Ω–∫–∞: {event.change_score:.3f}, –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {event.confidence:.3f}")
                
                if len(analysis['change_events']) > 5:
                    print(f"   ... —Ç–∞ —â–µ {len(analysis['change_events']) - 5} –∑–º—ñ–Ω")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
            report_path = Path("event_detection_results.json")
            report = {
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "video": {
                    "file": str(video_path),
                    "duration": 29.6
                },
                "processing": {
                    "detection_time": processing_time,
                    "analysis_time": analysis_time,
                    "total_time": processing_time + analysis_time
                },
                "results": {
                    "keyframes_selected": len(timepoints),
                    "total_changes_detected": analysis['total_changes_detected'],
                    "compression_ratio": analysis['compression_ratio']
                },
                "keyframes": [
                    {
                        "index": tp.index,
                        "timestamp": tp.seconds,
                        "frame_index": tp.frame_index
                    }
                    for tp in timepoints
                ]
            }
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_path}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
        
        print(f"\nüéâ EVENT-DRIVEN –î–ï–¢–ï–ö–¶–Ü–Ø –£–°–ü–Ü–®–ù–û –ü–†–ê–¶–Æ–Ñ!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∏—è–≤–ª—è—î –∑–º—ñ–Ω–∏ –ø–æ–¥—ñ–π —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î –∫–µ–π—Ñ—Ä–µ–π–º–∏!")
        print(f"üëÅÔ∏è  –ì–æ—Ç–æ–≤–∞ –¥–æ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—ñ–ø–∞–Ω–Ω—è –æ—á–µ–π —Ç–∞ —ñ–Ω—à–∏—Ö –º—ñ–∫—Ä–æ-–∑–º—ñ–Ω!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_simple_pipeline_test():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ pipeline."""
    print(f"\nüîß –¢–ï–°–¢ INTEGRATION –ó PIPELINE")
    print("=" * 60)
    
    try:
        # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        from video_shots.config.config import
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        original_max_fps = getattr(config, 'MAX_FRAMES_PER_SECOND', 5)
        original_sensitivity = config.CHANGE_SENSITIVITY.copy()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        config.MAX_FRAMES_PER_SECOND = 2  # –î—É–∂–µ –ø–æ–≤—ñ–ª—å–Ω–æ
        config.CHANGE_SENSITIVITY = {
            'facial': 0.3,
            'pose': 0.4,
            'scene': 0.5,
            'motion': 0.4,
            'visual_quality': 0.5
        }
        
        print(f"‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ:")
        print(f"   üìä MAX_FRAMES_PER_SECOND: {config.MAX_FRAMES_PER_SECOND}")
        print(f"   üéØ –ó–Ω–∏–∂–µ–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ")
        
        from video_shots.core.pipeline import VideoAnalysisPipeline
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤
        pipeline = VideoAnalysisPipeline("input/videos/nyane_30s.mp4")
        metadata = pipeline._get_video_metadata()
        
        print(f"\nüìπ –ú–µ—Ç–∞–¥–∞–Ω—ñ –≤—ñ–¥–µ–æ:")
        print(f"   ‚è±Ô∏è  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {metadata['duration']:.2f}—Å")
        print(f"   üìä FPS: {metadata['fps']:.1f}")
        print(f"   üé¨ –ö–∞–¥—Ä—ñ–≤: {metadata['frame_count']}")
        
        print(f"\nüéØ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤...")
        start_time = time.time()
        timepoints = pipeline._calculate_keyframe_timepoints(metadata)
        calc_time = time.time() - start_time
        
        print(f"‚úÖ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {calc_time:.2f}—Å")
        print(f"üé¨ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(timepoints)} –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤")
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        config.MAX_FRAMES_PER_SECOND = original_max_fps
        config.CHANGE_SENSITIVITY = original_sensitivity
        
        return True
        
    except Exception as e:
        print(f"‚ùå Pipeline —Ç–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É."""
    print("üé¨ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ò EVENT-DRIVEN –î–ï–¢–ï–ö–¶–Ü–á")
    print("=" * 60)
    
    success1 = run_optimized_detection()
    success2 = run_simple_pipeline_test()
    
    if success1 and success2:
        print(f"\n" + "=" * 60)
        print("üéâ –°–ò–°–¢–ï–ú–ê –£–°–ü–Ü–®–ù–û –ó–ê–ü–£–©–ï–ù–ê!")
        print("‚úÖ Event-driven –¥–µ—Ç–µ–∫—Ü—ñ—è –∫–µ–π—Ñ—Ä–µ–π–º—ñ–≤ –ø—Ä–∞—Ü—é—î!")
        print("üëÅÔ∏è  –ì–æ—Ç–æ–≤–∞ –≤–∏—è–≤–ª—è—Ç–∏ –∫–æ–∂–Ω—É –∑–º—ñ–Ω—É –≤—ñ–¥ –∑–∞–∫—Ä–∏—Ç–∏—Ö –¥–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—á–µ–π!")
        print("üé¨ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –≤–∞—à–∏—Ö –≤—ñ–¥–µ–æ!")
        print("=" * 60)
    else:
        print(f"\n‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏.")

if __name__ == "__main__":
    main()
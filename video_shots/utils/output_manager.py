"""
–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
=====================================================

–¶–µ–π –º–æ–¥—É–ª—å –∑–∞–±–µ–∑–ø–µ—á—É—î:
- –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ –ø–∞–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É output
- –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö
- –ú–µ—Ç–∞–¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–∂–µ–Ω –∞–Ω–∞–ª—ñ–∑
- –ü—Ä–æ—Å—Ç–∏–π API –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
"""

import uuid
import json
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Union, Any
from dataclasses import dataclass, asdict

from video_shots.logging.logger import get_logger


@dataclass
class AnalysisMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω—ñ –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ."""
    session_id: str
    video_name: str
    video_path: str
    start_time: str
    end_time: Optional[str] = None
    analysis_type: str = "complete"  # "complete", "audio_only", "video_only"
    config_used: Optional[Dict] = None
    success: bool = False
    error_message: Optional[str] = None
    total_duration: Optional[float] = None
    keyframes_count: int = 0
    audio_segments_count: int = 0
    output_files: List[str] = None

    def __post_init__(self):
        if self.output_files is None:
            self.output_files = []


class OutputManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.
    
    –°—Ç–≤–æ—Ä—é—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —É–ø—Ä–∞–≤–ª—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ñ–∞–π–ª—ñ–≤.
    """
    
    def __init__(self, base_output_dir: Union[str, Path] = "output"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            base_output_dir: –ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        """
        self.base_output_dir = Path(base_output_dir)
        self.base_output_dir.mkdir(parents=True, exist_ok=True)
        self.logger = get_logger()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–æ—ó –ø–∞–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.archive_dir = self.base_output_dir / "_archive"
        self.archive_dir.mkdir(exist_ok=True)
        
    def create_analysis_session(
        self,
        video_path: Union[str, Path],
        analysis_type: str = "complete",
        config: Optional[Dict] = None,
        custom_session_name: Optional[str] = None
    ) -> "AnalysisSession":
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é –∞–Ω–∞–ª—ñ–∑—É –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—é –ø–∞–ø–∫–æ—é.
        
        Args:
            video_path: –®–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É ("complete", "audio_only", "video_only")
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
            custom_session_name: –ö–∞—Å—Ç–æ–º–Ω–∞ –Ω–∞–∑–≤–∞ —Å–µ—Å—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            AnalysisSession: –û–±'—î–∫—Ç —Å–µ—Å—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        video_path = Path(video_path)
        video_name = video_path.stem
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—ñ—ó
        session_id = str(uuid.uuid4())[:8]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–∞–ø–∫–∏
        if custom_session_name:
            session_name = f"{custom_session_name}_{session_id}"
        else:
            session_name = f"{video_name}_{timestamp}_{session_id}"
        
        session_dir = self.base_output_dir / session_name
        
        # –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ (–Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫)
        counter = 1
        original_session_dir = session_dir
        while session_dir.exists():
            session_dir = original_session_dir.parent / f"{original_session_dir.name}_{counter}"
            counter += 1
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        metadata = AnalysisMetadata(
            session_id=session_id,
            video_name=video_name,
            video_path=str(video_path),
            start_time=datetime.now().isoformat(),
            analysis_type=analysis_type,
            config_used=config
        )
        
        session = AnalysisSession(session_dir, metadata, self.logger)
        session.create_directory_structure()
        
        self.logger.info(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∞–Ω–∞–ª—ñ–∑—É: {session_name}")
        self.logger.info(f"   üìç –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {session_dir}")
        self.logger.info(f"   üé¨ –í—ñ–¥–µ–æ: {video_name}")
        self.logger.info(f"   üîç –¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É: {analysis_type}")
        
        return session
        
    def get_recent_sessions(self, limit: int = 10) -> List[Path]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–µ—Å—ñ–π –∞–Ω–∞–ª—ñ–∑—É.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π
            
        Returns:
            List[Path]: –°–ø–∏—Å–æ–∫ —à–ª—è—Ö—ñ–≤ –¥–æ –ø–∞–ø–æ–∫ —Å–µ—Å—ñ–π
        """
        sessions = []
        for item in self.base_output_dir.iterdir():
            if item.is_dir() and not item.name.startswith("_"):
                sessions.append(item)
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        sessions.sort(key=lambda x: x.stat().st_ctime, reverse=True)
        return sessions[:limit]
        
    def archive_old_sessions(self, days_old: int = 30) -> int:
        """
        –ê—Ä—Ö—ñ–≤—É—î —Å—Ç–∞—Ä—ñ —Å–µ—Å—ñ—ó.
        
        Args:
            days_old: –í—ñ–∫ —Å–µ—Å—ñ–π –≤ –¥–Ω—è—Ö –¥–ª—è –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è
            
        Returns:
            int: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–∏—Ö —Å–µ—Å—ñ–π
        """
        current_time = datetime.now().timestamp()
        archived_count = 0
        
        for session_dir in self.base_output_dir.iterdir():
            if session_dir.is_dir() and not session_dir.name.startswith("_"):
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–∫—É –ø–∞–ø–∫–∏
                creation_time = session_dir.stat().st_ctime
                age_days = (current_time - creation_time) / (24 * 3600)
                
                if age_days > days_old:
                    archive_path = self.archive_dir / session_dir.name
                    shutil.move(str(session_dir), str(archive_path))
                    archived_count += 1
                    self.logger.info(f"üì¶ –ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ —Å–µ—Å—ñ—é: {session_dir.name}")
        
        if archived_count > 0:
            self.logger.info(f"üì¶ –í—Å—å–æ–≥–æ –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ —Å–µ—Å—ñ–π: {archived_count}")
        
        return archived_count
        
    def get_session_summary(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Å–µ—Å—ñ—ó.
        
        Returns:
            Dict: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—ó
        """
        total_sessions = len([d for d in self.base_output_dir.iterdir() 
                             if d.is_dir() and not d.name.startswith("_")])
        archived_sessions = len([d for d in self.archive_dir.iterdir() if d.is_dir()])
        
        total_size = sum(
            sum(f.stat().st_size for f in d.rglob('*') if f.is_file())
            for d in self.base_output_dir.iterdir() if d.is_dir()
        )
        
        return {
            "total_sessions": total_sessions,
            "archived_sessions": archived_sessions,
            "total_size_mb": round(total_size / (1024 * 1024), 2),
            "base_output_dir": str(self.base_output_dir)
        }


class AnalysisSession:
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ–¥–Ω—É —Å–µ—Å—ñ—é –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–µ–æ –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º —Ñ–∞–π–ª–∞–º–∏ —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏.
    """
    
    def __init__(self, session_dir: Path, metadata: AnalysisMetadata, logger):
        self.session_dir = session_dir
        self.metadata = metadata
        self.logger = logger
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø—ñ–¥–ø–∞–ø–∫–∏
        self.keyframes_dir = session_dir / "keyframes"
        self.audio_dir = session_dir / "audio"
        self.reports_dir = session_dir / "reports"
        self.segments_dir = session_dir / "segments"
        self.temp_dir = session_dir / "temp"
        
    def create_directory_structure(self):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è —Å–µ—Å—ñ—ó."""
        dirs_to_create = [
            self.session_dir,
            self.keyframes_dir,
            self.audio_dir,
            self.reports_dir,
            self.segments_dir,
            self.temp_dir
        ]
        
        for dir_path in dirs_to_create:
            dir_path.mkdir(parents=True, exist_ok=True)
            
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        self.save_metadata()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è README —Ñ–∞–π–ª—É
        self._create_readme()
        
    def _create_readme(self):
        """–°—Ç–≤–æ—Ä—é—î README —Ñ–∞–π–ª –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Å—ñ—é."""
        readme_content = f"""# –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ: {self.metadata.video_name}

## –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é
- **ID —Å–µ—Å—ñ—ó**: {self.metadata.session_id}
- **–í—ñ–¥–µ–æ—Ñ–∞–π–ª**: {self.metadata.video_path}
- **–¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É**: {self.metadata.analysis_type}
- **–ß–∞—Å –ø–æ—á–∞—Ç–∫—É**: {self.metadata.start_time}

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
- `keyframes/` - –ö–ª—é—á–æ–≤—ñ –∫–∞–¥—Ä–∏ –∑ –≤—ñ–¥–µ–æ
- `audio/` - –ê—É–¥—ñ–æ —Ñ–∞–π–ª–∏ —Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è
- `reports/` - –ó–≤—ñ—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É (JSON, HTML, TXT)
- `segments/` - –°–µ–≥–º–µ–Ω—Ç–∏ –≤—ñ–¥–µ–æ (—è–∫—â–æ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏—Å—å)
- `temp/` - –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏

## –ú–µ—Ç–∞–¥–∞–Ω—ñ
–î–µ—Ç–∞–ª—å–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Ñ–∞–π–ª—ñ `session_metadata.json`

–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        readme_path = self.session_dir / "README.md"
        readme_path.write_text(readme_content, encoding='utf-8')
        
    def save_metadata(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–µ—Å—ñ—ó."""
        metadata_path = self.session_dir / "session_metadata.json"
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(self.metadata), f, indent=2, ensure_ascii=False)
            
    def update_metadata(self, **kwargs):
        """–û–Ω–æ–≤–ª—é—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–µ—Å—ñ—ó."""
        for key, value in kwargs.items():
            if hasattr(self.metadata, key):
                setattr(self.metadata, key, value)
        self.save_metadata()
        
    def mark_completed(self, success: bool = True, error_message: Optional[str] = None):
        """–ü–æ–∑–Ω–∞—á–∞—î —Å–µ—Å—ñ—é —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—É."""
        self.metadata.end_time = datetime.now().isoformat()
        self.metadata.success = success
        if error_message:
            self.metadata.error_message = error_message
        self.save_metadata()
        
        status = "‚úÖ —É—Å–ø—ñ—à–Ω–æ" if success else "‚ùå –∑ –ø–æ–º–∏–ª–∫–æ—é"
        self.logger.info(f"üìã –°–µ—Å—ñ—è {self.metadata.session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {status}")
        
    def add_output_file(self, file_path: Union[str, Path], description: Optional[str] = None):
        """–î–æ–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª."""
        file_path = Path(file_path)
        file_info = str(file_path.relative_to(self.session_dir))
        if description:
            file_info += f" ({description})"
        self.metadata.output_files.append(file_info)
        self.save_metadata()
        
    def get_keyframe_path(self, frame_filename: str) -> Path:
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ –∫–∞–¥—Ä—É."""
        return self.keyframes_dir / frame_filename
        
    def get_audio_path(self, audio_filename: str) -> Path:
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É."""
        return self.audio_dir / audio_filename
        
    def get_report_path(self, report_filename: str) -> Path:
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É."""
        return self.reports_dir / report_filename
        
    def get_segment_path(self, segment_filename: str) -> Path:
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ–≥–º–µ–Ω—Ç—É –≤—ñ–¥–µ–æ."""
        return self.segments_dir / segment_filename
        
    def get_temp_path(self, temp_filename: str) -> Path:
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤."""
        return self.temp_dir / temp_filename
        
    def cleanup_temp(self):
        """–û—á–∏—â–∞—î —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏."""
        if self.temp_dir.exists():
            shutil.rmtree(self.temp_dir)
            self.temp_dir.mkdir()
            self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è —Å–µ—Å—ñ—ó {self.metadata.session_id}")
            
    def get_summary(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é."""
        total_files = len(list(self.session_dir.rglob('*'))) - len(list(self.temp_dir.rglob('*')))
        total_size = sum(
            f.stat().st_size for f in self.session_dir.rglob('*') 
            if f.is_file() and not f.is_relative_to(self.temp_dir)
        )
        
        return {
            "session_id": self.metadata.session_id,
            "video_name": self.metadata.video_name,
            "analysis_type": self.metadata.analysis_type,
            "success": self.metadata.success,
            "start_time": self.metadata.start_time,
            "end_time": self.metadata.end_time,
            "total_files": total_files,
            "total_size_mb": round(total_size / (1024 * 1024), 2),
            "output_files": self.metadata.output_files,
            "session_dir": str(self.session_dir)
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_output_manager: Optional[OutputManager] = None


def get_output_manager(base_output_dir: Union[str, Path] = "output") -> OutputManager:
    """–û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä OutputManager."""
    global _output_manager
    if _output_manager is None:
        _output_manager = OutputManager(base_output_dir)
    return _output_manager


def create_analysis_session(
    video_path: Union[str, Path],
    analysis_type: str = "complete",
    config: Optional[Dict] = None,
    custom_session_name: Optional[str] = None,
    base_output_dir: Union[str, Path] = "output"
) -> AnalysisSession:
    """
    –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó –∞–Ω–∞–ª—ñ–∑—É.
    
    Args:
        video_path: –®–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
        analysis_type: –¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É
        config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        custom_session_name: –ö–∞—Å—Ç–æ–º–Ω–∞ –Ω–∞–∑–≤–∞ —Å–µ—Å—ñ—ó
        base_output_dir: –ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è output
        
    Returns:
        AnalysisSession: –ù–æ–≤–∏–π –æ–±'—î–∫—Ç —Å–µ—Å—ñ—ó
    """
    manager = get_output_manager(base_output_dir)
    return manager.create_analysis_session(
        video_path=video_path,
        analysis_type=analysis_type,
        config=config,
        custom_session_name=custom_session_name
    )